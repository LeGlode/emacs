* Interface 
#+BEGIN_SRC emacs-lisp
      (setq inhibit-default-init t); pas d'initialisation
      (setq inhibit-startup-message t) ; no splash screen
      (display-time)
      (setq display-time-24hr-format t)
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq visible-bell t)

      (line-number-mode t)
      (column-number-mode t)
      (column-number-mode -1)
  (tool-bar-mode -1)
      (global-set-key "\M-w" 'kill-ring-save)
      (global-set-key "\M-s" 'replace-string)

      (transient-mark-mode 1)
      ;; (tool-bar-mode -1)
      (put 'upcase-region 'disabled nil)
      (put 'downcase-region 'disabled nil)
      ;; (scroll-bar-mode 1)
    ; réglages plus fins de la souris
      (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
      (setq mouse-wheel-progressive-speed nil)

      (setq scroll-conservatively 100)

#+END_SRC
** Recharge configuration
#+begin_src emacs-lisp
  (defun rechargeConfiguration()
    (interactive)
    (load-file "~/.emacs.d/vroom.el"))
#+end_src
#+begin_src emacs-lisp
  (setq column-number-mode t)
  (setq line-number-mode t)
#+end_src
#+begin_src emacs-lisp
  ;;(show-paren-mode 1)
  ;; (setq show-paren-style 'parenthesis)
  ;; (require 'paren)
  ;; (set-face-background 'show-paren-match-face "#5a7cc2")
  ;; (set-face-foreground 'show-paren-match-face (face-foreground 'default))
  ;;(set-face-attribute 'show-paren-match-face nil :weight 'extra-bold)
#+end_src
#+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms 
	`((".*", temporary-file-directory t)))
#+end_src
** Windmove : mouvement fenêtre
#+begin_src emacs-lisp
  ;;changement de fenêtre au moyen de SHIFT + flêche
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src
#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
  (add-to-list 'default-frame-alist
  '(font . "Fira Code Retina 12")))
#+end_src
** Titre fenêtre
#+begin_src emacs-lisp
; Affiche la localisation du fichier en cours d'édition comme titre de la fenêtre.
(setq frame-title-format '("" (buffer-file-name "%f" (dired-directory dired-directory "%b"))))

#+end_src
* Themes
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC
#+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
    :ensure t
    :disabled t
    :config (load-theme 'zenburn t))
#+END_SRC
#+begin_src emacs-lisp
;;(load-theme 'bcd t)
#+end_src
#+begin_src emacs-lisp
;;(load-theme 'efg t)
#+end_src
#+begin_src emacs-lisp
(load-theme 'fgh t)
#+end_src
* Réglages org-mode

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;;Utilisations des 3 petits points en lieu et place des ... d'origine
    (setq org-ellipsis " …")
    ;;Boulets dans org
    ;Toujours ouvrir un ficher avec les 
    (setq org-startup-folded t)
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda()(org-bullets-mode 1))))
    (setq org-startup-folded t)
#+END_SRC

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src
* js2-mode
#+BEGIN-SRC emacs-lisp
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js2-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq js2-highlight-level 3)
#+END_SRC  

#+BEGIN-SRC emacs-lisp
# (require 'js2-refactor)
# (require 'xref-js2)

# (add-hook 'js2-mode-hook #'js2-refactor-mode)
# (js2r-add-keybindings-with-prefix "C-c C-r")
# (define-key js2-mode-map(kbd "C-k") #'js2r-kill)

# (define-key js-mode-map (kbd "M-.") nil)

# (add-hook 'js2-mode-hook (lambda()
# (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
#+END_SRC  
* Company
#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
  (setq company-minimum-prefix-length 1)
  ;; (general-def company-active-map
  ;; "C-n" 'company-select-next
  ;; "C-p" 'company-select-previous)
  ;; (general-def company-search-map
  ;; "C-n" 'company-select-next
  ;; "C-p" 'company-select-previous)
#+end_src
* Undo-tree
#+begin_src emacs-lisp
  ;; sacha chua
  ;;C-x u (undo-tree-visualize)
  ;; (use-package undo-tree
  ;; :diminish undo-tree-mode
  ;; :config
  ;; (progn
  ;; (global-undo-tree-mode)
  ;; (setq undo-tree-visualizer-timestamps t)
  ;; (setq undo-tree-visualizer-diff t)))
#+end_src
* Rainbow delimiters  
#+begin_src emacs-lisp
;;(use-package rainbow-delimiters :disabled nil)
(require 'rainbow-delimiters)
(rainbow-delimiters-mode t)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src
* Paren mode
#+begin_src emacs-lisp
(setq show-paren-style 'mixed)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+end_src
* Flycheck
#+begin_src emacs-lisp
(require 'flycheck)
(add-hook 'after-init-hook 'global-flycheck-mode)
(define-fringe-bitmap 'flycheck-fringe-bitmap-ball
(vector #b00000000
#b00000000
#b00000000
#b00000000
#b00000000
#b00111000
#b01111100
#b11111110
#b11111110
#b01111100
#b01111000
#b00000000
#b00000000
#b00000000
#b00000000
#b00000000))
(flycheck-define-error-level 'error
:severity 100
:compilation-level 2
:overlay-category 'flycheck-error-overlay
:fringe-bitmap 'flycheck-fringe-bitmap-ball
:fringe-face 'flycheck-fringe-error
:error-list-face 'flycheck-error-list-error)
#+end_src
* Mise en page html : paragraphes + entêtes

  #+BEGIN_SRC emacs-lisp
(defun cca-parap(d1 d2)
  (interactive"r")
  (save-excursion
    (goto-char d2)(insert "</p>")
    (goto-char d1)(insert "<p>")))

(defun cca-h1(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h1>")
    (goto-char d1)(insert "<h1>")
))

(defun cca-h2(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h2>")
    (goto-char d1)(insert "<h2>")
))

(defun cca-h3(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h3>")
    (goto-char d1)(insert "<h3>")
))

(defun cca-h4(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h4>")
    (goto-char d1)(insert "<h4>")
))


(defun cca-h5(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h5>")
    (goto-char d1)(insert "<h5>")
))


(defun cca-h6(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</h6>")
    (goto-char d1)(insert "<h6>")
))


  #+END_SRC
* Mise en page html : tableaux + listes
  #+BEGIN_SRC emacs-lisp
; Tableaux

(defun cca-trth(debut fin)
  "A partir d'une région sélectionnée, place <tr><th>au début et </th></tr> à la fin"
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</th></tr>")
    (goto-char debut)(insert "<tr><th colspan=\"\" class=\"titre\">")
))


(defun cca-trtd(debut fin)
  "A partir d'une région sélectionnée, place <tr><td>au début et </td></tr> à la fin"
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</td></tr>")
    (goto-char debut)(insert "<tr><td colspan=\"\" class=\"titre\">")
))


(defun cca-tr(debut fin)
  "A partir d'une région sélectionnée, place <tr>au début et </tr> à la fin"
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</tr>")
    (goto-char debut)(insert "<tr>")
))

(defun cca-td(debut fin)
  "A partir d'une région sélectionnée, place <td>au début et </td> à la fin"
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</td>")
    (goto-char debut)(insert "<td>")
))


;definition list

(defun cca-dl(deb fin)
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</dl>\n")
    (goto-char deb)(insert "<dl class=\"\">\n")
))

(defun cca-dt(deb fin)
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</dt>")
    (goto-char deb)(insert "<dt>")
))

(defun cca-dd(deb fin)
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</dd>")
    (goto-char deb)(insert "<dd>")
))


  #+END_SRC
* Mise en page html : typographie : signes doubles
  #+BEGIN_SRC emacs-lisp
(defun cca-exclamation()
  (interactive)
  (save-excursion
    (insert " !")))

(defun cca-interrogation()
  (interactive)
  (save-excursion
    (insert " ?")))

(defun cca-deuxpoints()
  (interactive)
  (save-excursion
    (insert " :")))

(defun cca-pointvirgule()
  (interactive)
  (save-excursion
    (insert " ;")))


  #+END_SRC
* Mise en page html : typographie : espaces  + guillemets

  #+BEGIN_SRC emacs-lisp
(defun cca-insecable()
  (interactive)
  (save-excursion)
(ucs-insert '#xa0))

(defun cca-fine-secable()
  (interactive)
  (save-excursion)
(ucs-insert '#x2009))

(defun cca-fine-insecable()
  (interactive)
  (save-excursion)
(ucs-insert '#x202f))


(defun cca-tiret-cadratin()
  (interactive)
  (save-excursion)
(ucs-insert '#x2014))

(defun cca-tiret-demi-cadratin()
  (interactive)
  (save-excursion)
(ucs-insert '#x2013))



  #+END_SRC
* Mise en page html : typographie : autres signes
  #+BEGIN_SRC emacs-lisp

(defun cca-left()
  (interactive)
  (save-excursion)
(ucs-insert '#x201c))

(defun cca-right()
  (interactive)
  (save-excursion)
(ucs-insert '#x201d))

(defun cca-left-single()
  (interactive)
  (save-excursion)
(ucs-insert '#x2018))

(defun cca-right-single()
  (interactive)
  (save-excursion)
(ucs-insert '#x2019))

(defun cca-ampersand()
  (interactive)
  (save-excursion)
(ucs-insert '#x026))

(defun cca-apostrophe()
  (interactive)
  (save-excursion)
(ucs-insert '#x2019))

(defun cca-suspension()
  (interactive)
  (save-excursion)
(ucs-insert '#x2026))

  #+END_SRC
* Mise en page html : autres
  #+BEGIN_SRC emacs-lisp
(defun cca-emem(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</em>")
    (goto-char d1)(insert "<em>")
))

(defun cca-sup-sup(deb fin)
  "A partir d'une région sélectionnée, place <sup>au début et </sup> à la fin"
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</sup>")
    (goto-char deb)(insert "<sup>")
))


(defun cca-aspan(deb fin)
  (interactive "r")
  (save-excursion
    (goto-char fin)(insert "</span>")
    (goto-char deb)(insert "<span class=\"\">")
))

(defun cca-link(d1 d2)
  (interactive "r")
  (save-excursion
    (goto-char d2)(insert "</a>")
    (goto-char d1)(insert "<a href=\"\">")
))

; Notes nda 

(defun cca-cfa(d1 d2)
(interactive "r")
(save-excursion
(goto-char d2)(insert "</cfa>")
(goto-char d1)(insert "<cfa>")))

(defun cca-nda(d1 d2)
(interactive "r")
(save-excursion
(goto-char d2)(insert "</nda>")
(goto-char d1)(insert "<nda>")))


  #+END_SRC
* Mise en page html : misc
* Typographie
** Signes doubles
#+begin_src emacs-lisp
(defun cca-exclamation()
  (interactive)
  (save-excursion
    (insert " !")))

(defun cca-interrogation()
  (interactive)
  (save-excursion
    (insert " ?")))

(defun cca-deuxpoints()
  (interactive)
  (save-excursion
    (insert " :")))

(defun cca-pointvirgule()
  (interactive)
  (save-excursion
    (insert " ;")))

#+end_src
** Espaces
#+begin_src emacs-lisp
(defun cca-insecable()
  (interactive)
  (save-excursion)
(ucs-insert '#xa0))

(defun cca-fine-secable()
  (interactive)
  (save-excursion)
(ucs-insert '#x2009))

(defun cca-fine-insecable()
  (interactive)
  (save-excursion)
(ucs-insert '#x202f))

(defun cca-tiret-cadratin()
  (interactive)
  (save-excursion)
(ucs-insert '#x2014))

(defun cca-tiret-demi-cadratin()
  (interactive)
  (save-excursion)
(ucs-insert '#x2013))
#+end_src
** Autres
#+begin_src emacs-lisp

(defun cca-ae()
  (interactive)
  (save-excursion)
  (ucs-insert '#x00e6))
 
(defun cca-oe()
  (interactive)
  (save-excursion)
  (ucs-insert '#x0153))

(defun cca-left()
  (interactive)
  (save-excursion)
(ucs-insert '#x201c))

(defun cca-right()
  (interactive)
  (save-excursion)
(ucs-insert '#x201d))

(defun cca-left-single()
  (interactive)
  (save-excursion)
(ucs-insert '#x2018))

(defun cca-right-single()
  (interactive)
  (save-excursion)
(ucs-insert '#x2019))

(defun cca-ampersand()
  (interactive)
  (save-excursion)
(ucs-insert '#x026))

(defun cca-apostrophe()
  (interactive)
  (save-excursion)
(ucs-insert '#x2019))

(defun cca-suspension()
  (interactive)
  (save-excursion)
(ucs-insert '#x2026))
#+end_src

#+begin_src emacs-lisp
;supprime les lignes blanches multiples et ne laisse que des singletons de lignes blanches
(defun single-lines-only ()
  "replace multiple blank lines with a single one"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "\\(^\\s-*$\\)\n" nil t)
    (replace-match "\n")
    (forward-char 1)))

#+end_src
* Typographie : raccourcis
#+begin_src emacs-lisp
  (global-set-key (kbd "C-<kp-1>") 'cca-left) ; “
  (global-set-key (kbd "C-<kp-2>") 'cca-right) ; ”
  (global-set-key (kbd "C-<kp-4>") 'cca-left-single) ; ‘
  (global-set-key (kbd "C-<kp-5>") 'cca-right-single) ; ’
  (global-set-key (kbd "C-<kp-7>") 'cca-guillemet-ouvrant) ; «
  (global-set-key (kbd "C-<kp-8>") 'cca-guillemet-fermant) ; »
  (global-set-key (kbd "C-<kp-3>") 'cca-insecable) ;  
  (global-set-key (kbd "C-<kp-6>") 'cca-tiret-cadratin) ; —
  (global-set-key (kbd "C-<kp-9>") 'cca-suspension) ; …
  (global-set-key (kbd "C-<kp-0>") 'cca-parap)


  (global-set-key (kbd "M-<kp-1>") 'cca-ae)
  (global-set-key (kbd "M-<kp-2>") 'cca-oe)

  ;; (global-set-key (kbd "M-<kp-decimal>") 'cca-link)
  ;; (global-set-key (kbd "M-<kp-0>") 'cca-tdm)
  ;; (global-set-key (kbd "M-<kp-1>") 'cca-h1)
  ;; (global-set-key (kbd "M-<kp-2>") 'cca-h2)
  (global-set-key (kbd "M-<kp-3>") 'cca-h3)
  (global-set-key (kbd "M-<kp-4>") 'cca-h4)
  (global-set-key (kbd "M-<kp-5>") 'cca-h5)
  (global-set-key (kbd "M-<kp-6>") 'cca-h6)

  (global-set-key (kbd "M-<kp-7>") 'cca-sup-sup)
  (global-set-key (kbd "M-<kp-8>") 'cca-aspan)
  (global-set-key (kbd "M-<kp-9>") 'cca-gras)

  (global-set-key (kbd "C-!") 'cca-exclamation)
  (global-set-key (kbd "C-:") 'cca-deuxpoints)
  (global-set-key (kbd "C-;") 'cca-pointvirgule)
  ; car clavier azerty donc pas de possibilité de "C-?"
  (global-set-key (kbd "C-,") 'cca-interrogation)

#+end_src
* Codes unicode

  |---------+--------|
  | Symbole | hex    |
  |---------+--------|
  | $       | U+0024 |
  | %       | U+0025 |
  | &       | U+0026 |
  |---------+--------|

* Raccourcis globaux
  #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f8>") 'ibuffer)
(global-set-key (kbd "<f6>") 'web-mode)
(global-set-key (kbd "<f7>") 'less-css-mode)
;(global-set-key (kbd "<f6>") 'cca-dldt)
;(global-set-key (kbd "<f7>") 'cca-dldd)

  #+END_SRC
* Expressions régulières
  #+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)

(defun occurrences (regexp &rest ignore)
  "Show all matches for REGEXP in an `occur' buffer."
  ;; keep text covered by occur-prefix and match text-properties
  ;; http://www.emacswiki.org/emacs/OccurMode
  (interactive (occur-read-primary-args))
  (occur regexp)
  (with-current-buffer (get-buffer "*Occur*")
    (let ((inhibit-read-only t)
	  delete-from
	  pos)
      (save-excursion
	(while (setq pos (next-property-change (point)))
	  (goto-char pos)
	  (if (not (or (get-text-property (point) 'occur-prefix)
		       (get-text-property (point) 'occur-match)))
	      (if delete-from
		  (delete-region delete-from (point))
		(setq delete-from (point)))
	    (when delete-from
	      (delete-region delete-from (point))
	      (if (get-text-property (point) 'occur-prefix)
		  (insert "\n")
		(insert " ")))
	    (setq delete-from nil)))))))

  #+END_SRC

* Outils
#+begin_src emacs-lisp
  (defun incremente(&optional arg)
    "Incrémenter le nombre sous le curseur"
    (interactive "*p")
    (let* ((bounds (bounds-of-thing-at-point 'word))
	   (beg (car bounds))
	   (end (cdr bounds))
	   (num (string-to-number (buffer-substring beg end)))
	   (incr (cond ((null arg) 1)
		       ((listp arg) -1)
		       (t arg)))
	   (value (+ num incr)))
      (delete-region beg end)
      (insert (format "%d" value))))
#+end_src
#+begin_src emacs-lisp
(defun plus()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point."))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))
(global-set-key (kbd "M-à") 'plus)
#+end_src
#+begin_src emacs-lisp
(defun moins()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point."))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))
(global-set-key (kbd "M-é") 'moins)
#+end_src


#+begin_src emacs-lisp
;supprime les lignes blanches multiples et ne laisse que des singletons de lignes blanches
(defun single-lines-only ()
  "replace multiple blank lines with a single one"
  (interactive)
  (goto-char (point-min))
  (while (re-search-forward "\\(^\\s-*$\\)\n" nil t)
    (replace-match "\n")
    (forward-char 1)))
#+end_src
#+begin_src emacs-lisp
; imprime les lettres de A à Z
(defun a-to-z()
  (interactive)
  (let ((i 64))
    (while (< i 90)
      (setq i (+ i 1))
      (insert (format "%c " i))))
)
#+end_src
* Conversion chiffres lettres
  #+BEGIN_SRC emacs-lisp
;;; Convertit en lettre les chiffres de 1 à 100.
;;; Inspiré du programme convertissant en chiffre romain les nombres arabes

(defun chiffre-lettre(envoi)
       (cdr (assoc envoi nombre<->francais)))

(defun chiffre-lettre-anglais(envoi)
       (cdr (assoc envoi number<->english)))


(defconst nombre<->francais
'((1 . "Un")
(2 . "Deux")
(3 . "Trois")
(4 . "Quatre")
(5 . "Cinq")
(6 . "Six")
(7 . "Sept")
(8 . "Huit")
(9 . "Neuf")
(10 . "Dix")
(11 . "Onze")
(12 . "Douze")
(13 . "Treize")
(14 . "Quatorze")
(15 . "Quinze")
(16 . "Seize")
(17 . "Dix-sept")
(18 . "Dix-huit")
(19 . "Dix-neuf")
(20 . "Vingt")
(21 . "Vingt et un")
(22 . "Vingt-deux")
(23 . "Vingt-trois")
(24 . "Vingt-quatre")
(25 . "Vingt-cinq")
(26 . "Vingt-six")
(27 . "Vingt-sept")
(28 . "Vingt-huit")
(29 . "Vingt-neuf")
(30 . "Trente")
(31 . "Trente et un")
(32 . "Trente-deux")
(33 . "Trente-trois")
(34 . "Trente-quatre")
(35 . "Trente-cinq")
(36 . "Trente-six")
(37 . "Trente-sept")
(38 . "Trente-huit")
(39 . "Trente-neuf")
(40 . "Quarante")
(41 . "Quarante et un")
(42 . "Quarante-deux")
(43 . "Quarante-trois")
(44 . "Quarante-quatre")
(45 . "Quarante-cinq")
(46 . "Quarante-six")
(47 . "Quarante-sept")
(48 . "Quarante-huit")
(49 . "Quarante-neuf")
(50 . "Cinquante")
(51 . "Cinquante et un")
(52 . "Cinquante-deux")
(53 . "Cinquante-trois")
(54 . "Cinquante-quatre")
(55 . "Cinquante-cinq")
(56 . "Cinquante-six")
(57 . "Cinquante-sept")
(58 . "Cinquante-huit")
(59 . "Cinquante-neuf")
(60 . "Soixante")
(61 . "Soixante et un")
(62 . "Soixante-deux")
(63 . "Soixante-trois")
(64 . "Soixante-quatre")
(65 . "Soixante-cinq")
(66 . "Soixante-six")
(67 . "Soixante-sept")
(68 . "Soixante-huit")
(69 . "Soixante-neuf")
(70 . "Soixante-dix")
(71 . "Soixante-et-onze")
(72 . "Soixante-douze")
(73 . "Soixante-treize")
(74 . "Soixante-quatorze")
(75 . "Soixante-quinze")
(76 . "Soixante-seize")
(77 . "Soixante-dix-sept")
(78 . "Soixante-dix-huit")
(79 . "Soixante-dix-neuf")
(80 . "Quatre-vingts")
(81 . "Quatre-vingt-un")
(82 . "Quatre-vingt-deux")
(83 . "Quatre-vingt-trois")
(84 . "Quatre-vingt-quatre")
(85 . "Quatre-vingt-cinq")
(86 . "Quatre-vingt-six")
(87 . "Quatre-vingt-sept")
(88 . "Quatre-vingt-huit")
(89 . "Quatre-vingt-neuf")
(90 . "Quatre-vingt-dix")
(91 . "Quatre-vingt-onze")
(92 . "Quatre-vingt-douze")
(93 . "Quatre-vingt-treize")
(94 . "Quatre-vingt-quatorze")
(95 . "Quatre-vingt-quinze")
(96 . "Quatre-vingt-seize")
(97 . "Quatre-vingt-dix-sept")
(98 . "Quatre-vingt-dix-huit")
(99 . "Quatre-vingt-dix-neuf")
(100 . "Cent")))

(defconst number<->english
'((1 . "One")
(2 . "Two")
(3 . "Three")
(4 . "Four")
(5 . "Five")
(6 . "Six")
(7 . "Seven")
(8 . "Eight")
(9 . "Nine")
(10 . "Ten")
(11 . "Eleven")
(12 . "Twelve")
(13 . "Thirteen")
(14 . "Fourteen")
(15 . "Fifteen")
(16 . "Sixteen")
(17 . "Seventeen")
(18 . "Eighteen")
(19 . "Nineteen")
(20 . "Twenty")
(21 . "Twenty-One")
(22 . "Twenty-Two")
(23 . "Twenty-Three")
(24 . "Twenty-Four")
(25 . "Twenty-Five")
(26 . "Twenty-Six")
(27 . "Twenty-Seven")
(28 . "Twenty-Eight")
(29 . "Twenty-Nine")
(30 . "Thirty")
(31 . "Thirty-One")
(32 . "Thirty-Two")
(33 . "Thirty-Three")
(34 . "Thirty-Four")
(35 . "Thirty-Five")
(36 . "Thirty-Six")
(37 . "Thirty-Seven")
(38 . "Thirty-Eight")
(39 . "Thirty-Nine")
(40 . "Forty")
(41 . "Forty-One")
(42 . "Forty-Two")
(43 . "Forty-Three")
(44 . "Forty-Four")
(45 . "Forty-Five")
(46 . "Forty-Six")
(47 . "Forty-Seven")
(48 . "Forty-Eight")
(49 . "Forty-Nine")
(50 . "Fifty")
(51 . "Fifty-One")
(52 . "Fifty-Two")
(53 . "Fifty-Three")
(54 . "Fifty-Four")
(55 . "Fifty-Five")
(56 . "Fifty-Six")
(57 . "Fifty-Seven")
(58 . "Fifty-Eight")
(59 . "Fifty-Nine")
(60 . "Sixty")
(61 . "Sixty-One")
(62 . "Sixty-Two")
(63 . "Sixty-Three")
(64 . "Sixty-Four")
(65 . "Sixty-Five")
(66 . "Sixty-Six")
(67 . "Sixty-Seven")
(68 . "Sixty-Eight")
(69 . "Sixty-Nine")
(70 . "Seventy")
(71 . "Seventy-One")
(72 . "Seventy-Two")
(73 . "Seventy-Three")
(74 . "Seventy-Four")
(75 . "Seventy-Five")
(76 . "Seventy-Six")
(77 . "Seventy-Seven")
(78 . "Seventy-Eight")
(79 . "Seventy-Nine")
(80 . "Eighty")
(81 . "Eighty-One")
(82 . "Eighty-Two")
(83 . "Eighty-Three")
(84 . "Eighty-Four")
(85 . "Eighty-Five")
(86 . "Eighty-Six")
(87 . "Eighty-Seven")
(88 . "Eighty-Eight")
(89 . "Eighty-Nine")
(90 . "Ninety")
(91 . "Ninety-One")
(92 . "Ninety-Two")
(93 . "Ninety-Three")
(94 . "Ninety-Four")
(95 . "Ninety-Five")
(96 . "Ninety-Six")
(97 . "Ninety-Seven")
(98 . "Ninety-Eight")
(99 . "Ninety-Nine")
(100 . "Hundred")))

  #+END_SRC
* Folding
** À la vim
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (global-set-key (kbd "M-ç") 'hs-toggle-hiding)
#+end_src
* Agressive-indent
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'aggressive-indent-mode)
#+end_src
* Lilypond
  #+begin_src emacs-lisp
(add-hook 'LilyPond-mode-hook 'flycheck-mode)
(eval-after-load 'flycheck '(require 'flycheck-lilypond)
  #+end_src
* Emmet
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:ensure t)
#+end_src
* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure  t)
#+end_src
* LeGlode
#+begin_src emacs-lisp
(defun leglode()
(interactive)
(save-excursion
(insert "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")))
#+end_src
* Kenavo
#+begin_src emacs-lisp
(defun kenavo()
(interactive)
(save-excursion
(insert "")))
#+end_src
